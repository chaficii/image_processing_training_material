/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tp2_bddm;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author TT
 */
public class RegionGrowing extends javax.swing.JFrame {

    /**
     * Creates new form RegionGrowing
     */
    Map<String, Color> map = new HashMap<>();
    Color[] colors = {Color.RED, Color.BLUE, Color.YELLOW, Color.GREEN, Color.GRAY};
    public BufferedImage bimg ;
    public BufferedImage img;
    int w, h;
    public Color curr_Color = Color.RED;
    
    boolean[][] matrix;
    
    public void resetMatrix()
    {
        for(int i = 0; i<h ; i++)
        {
            for(int j = 0 ; j < w ; j++)
            {
                matrix[i][j] = false;
            }
        }
    }
    
    public RegionGrowing() {
         try {
            initComponents();
            /* map.put("0",Color.RED);
            map.put("1", Color.BLUE);
            map.put("2", Color.YELLOW);
            map.put("3", Color.GRAY);
            map.put("4", Color.GREEN);*/

            img = ImageIO.read(new File("D:\\flower.jpg"));
            w = img.getWidth(null);
            h = img.getHeight(null);

            bimg = new BufferedImage(h, w, 1);

            for(int i = 0 ; i < h ; i++)
            {
                for(int j = 0 ; j < w ; j++)
                {
                    bimg.setRGB(i, j, Color.WHITE.getRGB());
                }
            }
            
            matrix = new boolean[h][];
            for(int i = 0 ; i < h ; i++)
            {
                matrix[i] = new boolean[w];
            }
            resetMatrix();
            
         } catch (IOException ex) {
             Logger.getLogger(RegionGrowing.class.getName()).log(Level.SEVERE, null, ex);
         }
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tp2_bddm/flower.jpg"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel3.setText("jLabel3");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "red", "blue", "yellow", "green", "gray" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox1PropertyChange(evt);
            }
        });

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 288, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void foo(java.awt.event.MouseEvent evt)
    {
        try {
            BufferedImage img = ImageIO.read(new File("D:\\flower.jpg"));
            int w = img.getWidth(null);
            int h = img.getHeight(null);
            
            BufferedImage bimg = new BufferedImage(h, w, 1);
            
            for(int i = 0 ; i < h ; i++)
            {
                for(int j = 0 ; j < w ; j++)
                {
                    bimg.setRGB(i, j, Color.WHITE.getRGB());
                }
            }
            
            int imagem = img.getRGB(evt.getX(), evt.getY());
            //System.out.println(imagem*-1);
            
            boolean flag = true;
            int posX = evt.getX();
            int posY = evt.getY();
            int range = 0;
            int avg = imagem;
            ArrayList<Integer> average = new ArrayList<Integer>();
            
            while(true)
            {
                range++;
                if(flag)
                {
                    //System.out.println(range);
                    flag = false;
                    average.clear();
                    for(int i = posX - range ; i <= posX + range ; i++)
                    {
                        if(i <= 0 || i >= h - 1 )
                            continue;
                        for(int j = posY - range ; j <= posY + range ; j++)
                        {
                            
                            if(j <= 0 || j >= w - 1)
                                continue;
                            //System.out.println(i + " " + j);
                            int cc = img.getRGB(i, j);
                            //Color c = new Color(cc);
                            //int v = 0;
                            //v |= (c.getRed()<<16) | (c.getGreen()<<8) | c.getBlue();
                            //average.add(cc);
                            
                            if(Math.abs(cc - avg) < 3000000)
                            {
                                bimg.setRGB(i, j, img.getRGB(i, j));
                                flag = true;
                            }
                        }
                    }
                    /*avg = (int) average.stream()
                            .mapToInt(p -> p)
                            .average()
                            .orElse(0);*/
                    //System.out.println(avg);
                    
                   if(range > Math.min(w , h))
                       break;
                }
                if(!flag)
                    break;
            }
           
            jLabel2.setIcon(new ImageIcon(bimg));
        } catch (IOException ex) {
            Logger.getLogger(RegionGrowing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public class Pix
    {
        public int x, y;
        public Color c;
        public int isClose;
        
        public Pix(int x, int y, Color c, int isClose)
        {
            this.x = x;
            this.y = y;
            this.c = c;
            this.isClose = isClose;
        }
    }
    
    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        int imagem = img.getRGB(evt.getX(), evt.getY());
        boolean flag = true;
        int posX = evt.getX();
        int posY = evt.getY();
        int range = 0;
        int avg = imagem;
        ArrayList<Pix> pixels = new ArrayList<Pix>();
        bimg.setRGB(posX, posY, img.getRGB(posX, posY));
        while(true)
        {
            range++;
            if(flag)
            {
                
                flag = false;
                System.out.println(range);
                pixels.clear();
                int y = posY - range;
                if(y <= 1)
                    break;
                for(int i = posX - range ; i <= posX + range ; i++)
                {
                    int c = img.getRGB(i, y);
                    pixels.add(new Pix(i, y, new Color(c), Math.abs(c - avg) < 3000000 ? 1 : 0));
                }
                y = posY + range;
                if(y >= w - 1)
                    break;
                for(int i = posX - range ; i <= posX + range ; i++)
                {
                    int c = img.getRGB(i, y);
                    pixels.add(new Pix(i, y, new Color(c), Math.abs(c - avg) < 3000000 ? 1 : 0));
                }
                int x = posX - range;
                if(x <= 1)
                    break;
                for(int j = posY - range ; j <= posY + range ; j++)
                {
                    int c = img.getRGB(x, j);
                    pixels.add(new Pix(x, j, new Color(c), Math.abs(c - avg) < 3000000 ? 1 : 0));
                }
                x = posX + range;
                if(x >= h - 1)
                    break;
                for(int j = posY - range ; j <= posY + range ; j++)
                {
                    int c = img.getRGB(x, j);
                    pixels.add(new Pix(x, j, new Color(c), Math.abs(c - avg) < 3000000 ? 1 : 0));
                }
                
                
                double averg = pixels.stream()
                        .mapToInt(p -> p.isClose)
                        .average()
                        .orElse(0);
                System.out.println(averg);
                if(averg >= (double) jSlider1.getValue()/100)
                {
                    for(int i = 0 ; i < pixels.size() ; i++)
                    {
                        if(pixels.get(i).isClose == 1)
                        {
                            if(matrix[pixels.get(i).x][pixels.get(i).y] == false)
                            {
                                bimg.setRGB(pixels.get(i).x, pixels.get(i).y, curr_Color.getRGB());
                                //bimg.setRGB(pixels.get(i).x, pixels.get(i).y, pixels.get(i).c.getRGB());
                                matrix[pixels.get(i).x][pixels.get(i).y] = true;
                            }
                        }
                            
                    }
                    flag = true;
                }
                else
                {
                    flag = false;
                }
            }
            if(!flag)
                break;
        }
        jLabel2.setIcon(new ImageIcon(bimg));
        
        
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        jLabel3.setText(""+ jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jComboBox1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox1PropertyChange
       
    }//GEN-LAST:event_jComboBox1PropertyChange

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
       
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
       
        System.out.println(jComboBox1.getSelectedIndex());
        if(jComboBox1.getSelectedIndex() == -1)
            curr_Color = colors[0];
        else curr_Color = colors[jComboBox1.getSelectedIndex()];
         
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for(int i = 0 ; i < h ; i++)
        {
            for(int j = 0 ; j < w ; j++)
            {
                bimg.setRGB(i, j, Color.WHITE.getRGB());
            }
        }
        resetMatrix();
        jLabel2.setIcon(new ImageIcon(bimg));
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegionGrowing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegionGrowing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegionGrowing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegionGrowing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegionGrowing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
}
