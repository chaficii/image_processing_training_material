/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tp2_bddm;

import java.awt.BorderLayout;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JFrame;
import javax.swing.JScrollPane;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
/**
 *
 * @author TT
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jButton1)
                .addContainerGap(992, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addContainerGap(455, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        TestHistogram();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void TestHistogram() {
        try {
            BufferedImage bimg;
            bimg = ImageIO.read(new File("D:\\08.jpg"));
            int width = bimg.getWidth(null);
            int height = bimg.getHeight(null);
            
            
            int[][] data = new int[width][height];
            int[][] totalC = new int[3][256];
            int[] red = new int[256];
            int[] green = new int[256];
            int[] blue = new int[256];
            
            
            
            for (int c = 0; c < width; c++) {
                for (int r = 0; r < height; r++) {
                    
                    int rgb = bimg.getRGB(c, r);
                    Color color = new Color(rgb);
                    int cr = color.getRed();
                    int cg = color.getGreen();
                    int cb = color.getBlue();
                    
                    data[c][r] = cr;
                    red[cr]++;          totalC[0][cr]++;
                    green[cg]++;        totalC[1][cg]++;
                    blue[cb]++;         totalC[2][cb]++;
                    
                }
            }
            
//            int norm = 500;
//            for(int i = 0 ; i < 256; i++)
//            {
//                red[i] /= norm;
//                green[i] /= norm;
//                blue[i] /= norm;
//                
//            }
//            System.out.println("Hello1");
            
            Map<Integer, Integer> mapR = new TreeMap<Integer, Integer>();
            for (int c = 0; c < 256; c++) {
                    int value = c;
                    int amount = red[c];
                    
                    mapR.put(value, amount);
            }
            JFrame frameR = new JFrame("Red");
            frameR.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frameR.setLayout(new BorderLayout());
            frameR.add(new JScrollPane(new Graph(mapR, new Color(255,0,0))));
            frameR.pack();
            frameR.setLocationRelativeTo(null);
            frameR.setVisible(true);
            frameR.setBounds(0,250,300,500);
            
            Map<Integer, Integer> mapG = new TreeMap<Integer, Integer>();
            for (int c = 0; c < 256; c++) {
                    int value = c;
                    int amount = green[c];
                    
                    mapG.put(value, amount);
            }
            JFrame frameG = new JFrame("Green");
            frameG.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frameG.setLayout(new BorderLayout());
            frameG.add(new JScrollPane(new Graph(mapG, new Color(0,255,0))));
            frameG.pack();
            frameG.setLocationRelativeTo(null);
            frameG.setVisible(true);
            frameG.setBounds(350,250,300,500);
            
            
            Map<Integer, Integer> mapB = new TreeMap<Integer, Integer>();
            for (int c = 0; c < 256; c++) {
                    int value = c;
                    int amount = blue[c];
                    
                    mapB.put(value, amount);
            }
            JFrame frameB = new JFrame("Blue");
            frameB.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frameB.setLayout(new BorderLayout());
            frameB.add(new JScrollPane(new Graph(mapB, new Color(0,0,255))));
            frameB.pack();
            frameB.setLocationRelativeTo(null);
            frameB.setVisible(true);
            frameB.setBounds(700,250,300,500);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    protected class Graph extends JPanel {

        protected static final int MIN_BAR_WIDTH = 1;
        private Map<Integer, Integer> mapHistory;
        private Color histoColor;
        public Graph(Map<Integer, Integer> mapHistory, Color cc) {
            this.mapHistory = mapHistory;
            int width = (mapHistory.size() * MIN_BAR_WIDTH) + 11;
            Dimension minSize = new Dimension(width, 128);
            Dimension prefSize = new Dimension(width, 256);
            setMinimumSize(minSize);
            setPreferredSize(prefSize);
            histoColor = cc;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (mapHistory != null) {
                int xOffset = 10;
                int yOffset = 10;
                int width = getWidth() - 1 - (xOffset * 2);
                int height = getHeight() - 1 - (yOffset * 2);
                Graphics2D g2d = (Graphics2D) g.create();
                g2d.setColor(Color.DARK_GRAY);
                g2d.drawRect(xOffset, yOffset, width, height);
                int barWidth = Math.max(MIN_BAR_WIDTH,
                        (int) Math.floor((float) width
                        / (float) mapHistory.size()));
                //System.out.println("width = " + width + "; size = "     + mapHistory.size() + "; barWidth = " + barWidth);
                int maxValue = 0;
                for (Integer key : mapHistory.keySet()) {
                    int value = mapHistory.get(key);
                    maxValue = Math.max(maxValue, value);
                }
                int xPos = xOffset;
                for (Integer key : mapHistory.keySet()) {
                    int value = mapHistory.get(key);
                    int barHeight = Math.round(((float) value
                            / (float) maxValue) * height);
                    g2d.setColor(histoColor);
                    int yPos = height + yOffset - barHeight;
//Rectangle bar = new Rectangle(xPos, yPos, barWidth, barHeight);
                    Rectangle2D bar = new Rectangle2D.Float(
                            xPos, yPos, barWidth, barHeight);
                    g2d.fill(bar);
                    g2d.setColor(histoColor);
                    g2d.draw(bar);
                    xPos += barWidth;
                }
                g2d.dispose();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
